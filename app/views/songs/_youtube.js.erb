<script>
var tag = document.createElement('script');
tag.src = "http://www.youtube.com/player_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
var done = false;
var player;
var samples = [];
var Sample = function(youtube_id, start, duration) {
  this.youtube_id = youtube_id;
  this.start = start;
  this.duration = duration;
  this.startTimeout = null;
  this.thisstopTimeout = null;
  this.splayer = new YT.Player(this.youtube_id, {
    height: '100',
    width: '100',
    videoId: this.youtube_id,
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    }
  });
  this.getPlayer = function() {
    return splayer;
  }
}
Sample.prototype = {
  // Sets a timeout based on currTime (of main video) for this Sample to start
  setTimeouts: function(currTime) {
    var offset = this.start - currTime;
    if (offset > 0) {
      _this = this;
      this.startTimeout = setTimeout(function(){ _this.splayer.playVideo() }, offset * 1000);
      this.stopTimeout = setTimeout(function(){ _this.splayer.stopVideo() }, (offset + this.duration) * 1000);
    }
  },
  clearTimeouts: function() {
    window.clearTimeout(this.startTimeout);
    window.clearTimeout(this.stopTimeout);
  }
}


function onYouTubePlayerAPIReady() {
  player = new YT.Player('player', {
    width: '940',
    videoId: "<%= song.youtube_id %>",
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    }
  });
  <% samples.each do |sample| %>
    samples.push(new Sample('<%= sample.youtube_id %>', <%= sample.start %>, <%= sample.duration %>));
  <% end %>
}
function onPlayerReady(evt) {
  //evt.target.playVideo();
}
function onPlayerStateChange(evt) {
  if (evt.data == YT.PlayerState.PLAYING && !done) {
    done = true;
  }
  else if (evt.data == YT.PlayerState.PAUSED) {
    console.log("paused");
  }
  else if (evt.data == YT.PlayerState.PLAYING) {
    console.log("playing");
    for (var i = 0; i < samples.length; i++) {
      samples[i].setTimeouts(player.getCurrentTime());
    }
  }
}

function getPlayerTime() {
  return player.getCurrentTime();
}
</script>
