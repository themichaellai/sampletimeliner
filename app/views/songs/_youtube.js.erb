<script>
var tag = document.createElement('script');
tag.src = "http://www.youtube.com/player_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
var player;
var samples = [];
var timelineUpdate;
var Sample = function(youtube_id, start, duration, offset, color, id) {
  this.color = color;
  this.youtube_id = youtube_id;
  this.start = start;
  this.duration = duration;
  this.offset = offset;
  this.id = id;
  this.startTimeout = null;
  this.thisstopTimeout = null;
  this.splayer = new YT.Player(this.youtube_id, {
    height: '100',
    width: '100',
    videoId: this.youtube_id,
    events: {
      'onReady': onPlayerReady,
    }
  });
  this.getPlayer = function() {
    return splayer;
  }
}
Sample.prototype = {
  // Sets a timeout based on currTime (of main video) for this Sample to start
  setTimeouts: function(currTime) {
    var offset = this.start + .1 - currTime;
    if (offset > 0) {
      (function(_this) {
        _this.splayer.unMute();
        _this.splayer.playVideo();
        _this.splayer.seekTo(_this.offset);
        _this.splayer.pauseVideo();
        _this.startTimeout = setTimeout(function(){
          _this.splayer.playVideo();
          _this.splayer.seekTo(_this.offset);
          $('#contain-' + _this.youtube_id + _this.id).addClass('active');
          player.mute();
        }, offset * 1000);
        _this.stopTimeout = setTimeout(function(){
          _this.splayer.pauseVideo();
          $('#contain-' + _this.youtube_id + _this.id).removeClass('active');
          player.unMute();
        }, (offset + _this.duration) * 1000);
      })(this);

    }
  },
  clearTimeouts: function() {
    clearTimeout(this.startTimeout);
    clearTimeout(this.stopTimeout);
  },
}


function onYouTubePlayerAPIReady() {
  player = new YT.Player('player', {
    width: '940',
    height: '200',
    videoId: "<%= song.youtube_id %>",
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    }
  });
  <% samples.each do |sample| %>
    samples.push(new Sample('<%= sample[:sample].youtube_id %>', <%= sample[:sample].second_offset %>, <%= sample[:sample].duration %>, <%= sample[:sample].start %>, '<%= sample[:color] %>', <%= sample[:sample].id %>));
  <% end %>
}
function onPlayerReady(evt) {
  evt.target.playVideo();
  evt.target.pauseVideo();
}
function onPlayerStateChange(evt) {
  if (evt.data == YT.PlayerState.PLAYING) {
    console.log("playing");
    for (var i = 0; i < samples.length; i++) {
      samples[i].clearTimeouts();
      samples[i].setTimeouts(player.getCurrentTime());
    }
    timelineUpdate = setInterval(function() {draw()}, 50);
  }
  else if (evt.data == YT.PlayerState.PAUSED) {
    console.log("paused");
    for (var i = 0; i < samples.length; i++) {
      samples[i].clearTimeouts();
      samples[i].splayer.pauseVideo();
    }
    clearInterval(timelineUpdate);
  }
  else if (evt.data == YT.PlayerState.CUED) {
    console.log("cued");
  }
  else if (evt.data == -1) {
    draw();
  }
}

function getPlayerTime() {
  return player.getCurrentTime();
}

function draw() {
  var canvas = document.getElementById('timeline');
  if (canvas.getContext) {
    var ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, 940, 150);

    var offset = (player.getCurrentTime()/player.getDuration());
    ctx.beginPath();
    ctx.moveTo(offset * 940, 85);
    ctx.lineTo(offset * 940, 65);
    ctx.lineTo(offset * 940 + 2, 65);
    ctx.lineTo(offset * 940 + 2, 85);
    ctx.fillStyle = 'black';
    ctx.fill();
    ctx.beginPath();
    ctx.moveTo(0, 75);
    ctx.lineTo(940, 75);
    ctx.closePath();
    ctx.stroke();

    for (var i = 0; i < samples.length; i++) {
      var soffset = samples[i].start / player.getDuration();
      var doffset = soffset + (samples[i].duration / player.getDuration());
      var ydirection;
      if (i % 2 == 0) ydirection = 1;
      else ydirection = -1;
      ctx.beginPath();
      ctx.moveTo(soffset * 940, 75 + (ydirection * 15));
      ctx.lineTo(doffset * 940, 75 + (ydirection * 15));
      ctx.lineTo(doffset * 940, 75 + (ydirection * 20));
      ctx.lineTo(soffset * 940, 75 + (ydirection * 20));
      ctx.lineTo(soffset * 940, 75 + (ydirection * 15));
      ctx.fillStyle = samples[i].color;
      ctx.fill();
      //ctx.closePath();
      //ctx.stroke();
    }
  }
}
</script>
